package battleship;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class OceanTest {
	Ocean ocean;
	Battleship battleship;
	
	
	@Before
	public void setUp() throws Exception {
		ocean = new Ocean();
	}

	@Test
	public void testOcean() {
		Ocean ocean = new Ocean();
		assertTrue(ocean instanceof Ocean);
	}

	@Test
	public void testPlaceAllShipsRandomly() {
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				assertFalse(ocean.isOccupied(i, j));
			}
		}
		
		int count = 0;
		int expected = 1*4 + 2*3 + 3*2 + 4*1;
		ocean.placeAllShipsRandomly();
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				if (ocean.isOccupied(i, j)){
					count++;
				}
			}
		}		
		assertEquals(expected, count);
	}

	@Test
	public void testIsOccupied() {
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				assertFalse(ocean.isOccupied(i, j));
			}
		}
		ocean.placeAllShipsRandomly();
		
		int count = 0;
		int expected = 1*4 + 2*3 + 3*2 + 4*1;
		ocean.placeAllShipsRandomly();
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				if (ocean.isOccupied(i, j)){
					count++;
				}
			}
		}		
		assertEquals(expected, count);
		
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				
			}
		}
		
		for (int i = 0; i < battleship.getLength(); i++) {
			assertTrue(ocean.isOccupied(3, i));
		}		
	}

	@Test
	public void testShootAt() {
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				assertFalse(ocean.shootAt(i, j));
			}
		}
		
	}

	@Test
	public void testGetShotsFired() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetHitCount() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetShipsSunk() {
		fail("Not yet implemented");
	}

	@Test
	public void testIsGameOver() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetShipArray() {
		fail("Not yet implemented");
	}

}
